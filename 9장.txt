[9장]

#데이터 준비

DROP TABLE IF EXISTS purchase_log;
CREATE TABLE purchase_log(
    dt              varchar(255)
  , order_id        integer
  , user_id         varchar(255)
  , purchase_amount integer
);

INSERT INTO purchase_log
VALUES
    ('2014-01-01',  1, 'rhwpvvitou', 13900)
  , ('2014-01-01',  2, 'hqnwoamzic', 10616)
  , ('2014-01-02',  3, 'tzlmqryunr', 21156)
  , ('2014-01-02',  4, 'wkmqqwbyai', 14893)
  , ('2014-01-03',  5, 'ciecbedwbq', 13054)
  , ('2014-01-03',  6, 'svgnbqsagx', 24384)
  , ('2014-01-03',  7, 'dfgqftdocu', 15591)
  , ('2014-01-04',  8, 'sbgqlzkvyn',  3025)
  , ('2014-01-04',  9, 'lbedmngbol', 24215)
  , ('2014-01-04', 10, 'itlvssbsgx',  2059)
  , ('2014-01-05', 11, 'jqcmmguhik',  4235)
  , ('2014-01-05', 12, 'jgotcrfeyn', 28013)
  , ('2014-01-05', 13, 'pgeojzoshx', 16008)
  , ('2014-01-06', 14, 'msjberhxnx',  1980)
  , ('2014-01-06', 15, 'tlhbolohte', 23494)
  , ('2014-01-06', 16, 'gbchhkcotf',  3966)
  , ('2014-01-07', 17, 'zfmbpvpzvu', 28159)
  , ('2014-01-07', 18, 'yauwzpaxtx',  8715)
  , ('2014-01-07', 19, 'uyqboqfgex', 10805)
  , ('2014-01-08', 20, 'hiqdkrzcpq',  3462)
  , ('2014-01-08', 21, 'zosbvlylpv', 13999)
  , ('2014-01-08', 22, 'bwfbchzgnl',  2299)
  , ('2014-01-09', 23, 'zzgauelgrt', 16475)
  , ('2014-01-09', 24, 'qrzfcwecge',  6469)
  , ('2014-01-10', 25, 'njbpsrvvcq', 16584)
  , ('2014-01-10', 26, 'cyxfgumkst', 11339)
;


INSERT INTO purchase_log
VALUES
    ('2014-02-01',  1, 'rhwpvvitou', 45123)
  , ('2014-02-01',  2, 'hqnwoamzic', 23102)
  , ('2014-02-02',  3, 'tzlmqryunr', 10231)
  , ('2014-02-02',  4, 'wkmqqwbyai', 10265)
  , ('2014-02-03',  5, 'ciecbedwbq', 19534)
  , ('2014-02-03',  6, 'svgnbqsagx', 24523)
  , ('2014-02-03',  7, 'dfgqftdocu', 26420)
  , ('2014-02-04',  8, 'sbgqlzkvyn',  4203)
  , ('2014-02-04',  9, 'lbedmngbol', 30215)
  , ('2014-02-04', 10, 'itlvssbsgx',  1642)
;




1. 날짜별 매출 집계하기

select 
	dt
	,COUNT(*) as purchase_count           -- 날짜별 판매 갯수
	,SUM(purchase_amount) as total_amount -- 날짜별 합계
	,AVG(purchase_amount) as avg_amount   -- 날짜별 평균
from purchase_log
group by dt 
order by dt;


               ●  결과  ● 
			   
dt        |purchase_count|total_amount|avg_amount            |
----------|--------------|------------|----------------------|
2014-01-01|             2|       24516|12258.0000000000000000|
2014-01-02|             2|       36049|    18024.500000000000|
2014-01-03|             3|       53029|    17676.333333333333|
2014-01-04|             3|       29299| 9766.3333333333333333|
2014-01-05|             3|       48256|    16085.333333333333|
2014-01-06|             3|       29440| 9813.3333333333333333|
2014-01-07|             3|       47679|    15893.000000000000|
2014-01-08|             3|       19760| 6586.6666666666666667|
2014-01-09|             2|       22944|11472.0000000000000000|
2014-01-10|             2|       27923|13961.5000000000000000|
2014-02-01|             2|       68225|    34112.500000000000|
2014-02-02|             2|       20496|10248.0000000000000000|
2014-02-03|             3|       70477|    23492.333333333333|
2014-02-04|             3|       36060|12020.0000000000000000|


==============================================================================================================================

2. 이동평균을 사용한 날짜별 추이 보기

* 매출 상승,하락 동향을 파악하기 위해 7일가늬 평균 매출을 이용한 7일 이동평균으로 표현

select 
	dt
	,SUM(purchase_amount) as total_amount
	-- 최근 최대 7일 동안의 평균 계산하기
	,avg(sum(purchase_amount)) over (order by dt rows between 6 preceding and current row) as seven_day_avg
	-- 최근 7일간의 평균을 확실하게 계산하기
	,case when 7=count(*) over (order by dt rows between 6 preceding and current row)  
		then  avg(sum(purchase_amount)) over (order by dt rows between 6 preceding and current row)
	end as seven_day_avg_strict
from purchase_log
group by dt 
order by dt;


* seven_day_avg : 과거 7일분의 데이터가 존재하지 않아도 이동평균을 구함
* seven_day_avg_strict : 최근 7일간의 데이터가 존재하는 경우에만 이동평균을 조회


               ●  결과  ● 
			   
dt        |total_amount|seven_day_avg     |seven_day_avg_strict|
----------|------------|------------------|--------------------|
2014-01-01|       24516|24516.000000000000|                    |
2014-01-02|       36049|30282.500000000000|                    |
2014-01-03|       53029|37864.666666666667|                    |
2014-01-04|       29299|35723.250000000000|                    |
2014-01-05|       48256|38229.800000000000|                    |
2014-01-06|       29440|36764.833333333333|                    |
2014-01-07|       47679|38324.000000000000|  38324.000000000000|
2014-01-08|       19760|37644.571428571429|  37644.571428571429|
2014-01-09|       22944|35772.428571428571|  35772.428571428571|
2014-01-10|       27923|32185.857142857143|  32185.857142857143|
2014-02-01|       68225|37746.714285714286|  37746.714285714286|
2014-02-02|       20496|33781.000000000000|  33781.000000000000|
2014-02-03|       70477|39643.428571428571|  39643.428571428571|
2014-02-04|       36060|37983.571428571429|  37983.571428571429|



==============================================================================================================================


3. 당월 매출 누계 구하기

select 
	dt
	,substring(dt,1,7) as year_month --연-월
	,sum(purchase_amount) as total_amount -- 날짜별 합계
	-- 연-월별 합계 누계
	,sum(sum(purchase_amount)) over(partition by substring(dt,1,7) order by dt rows unbounded preceding) as agg_aount
from purchase_log
group by dt 
order by dt;


*unbounded preceding : 윈도우함수에서 첫번째 로우부터 시작할 때

               ●  결과  ● 
			   
dt        |year_month|total_amount|agg_aount|
----------|----------|------------|---------|
2014-01-01|2014-01   |       24516|    24516|
2014-01-02|2014-01   |       36049|    60565|
2014-01-03|2014-01   |       53029|   113594|
2014-01-04|2014-01   |       29299|   142893|
2014-01-05|2014-01   |       48256|   191149|
2014-01-06|2014-01   |       29440|   220589|
2014-01-07|2014-01   |       47679|   268268|
2014-01-08|2014-01   |       19760|   288028|
2014-01-09|2014-01   |       22944|   310972|
2014-01-10|2014-01   |       27923|   338895|
2014-02-01|2014-02   |       68225|    68225|
2014-02-02|2014-02   |       20496|    88721|
2014-02-03|2014-02   |       70477|   159198|
2014-02-04|2014-02   |       36060|   195258|





# WITH 구문을 이용한 날짜별 매출

*결과는 1번과 동일하나, WITH 구문으로 가독성을 높임

with
daily_purchase as(
	select 
		dt
		,substring(dt,1,4) as year
		,substring(dt,6,2) as month
		,substring(dt,9,2) as date
		,sum(purchase_amount) as purchase_amount
		,count(order_id) as orders
	from purchase_log
	group by dt
)
select *
from daily_purchase 
order by dt;


               ●  결과  ● 
dt        |year|month|date|purchase_amount|orders|
----------|----|-----|----|---------------|------|
2014-01-01|2014|01   |01  |          24516|     2|
2014-01-02|2014|01   |02  |          36049|     2|
2014-01-03|2014|01   |03  |          53029|     3|
2014-01-04|2014|01   |04  |          29299|     3|
2014-01-05|2014|01   |05  |          48256|     3|
2014-01-06|2014|01   |06  |          29440|     3|
2014-01-07|2014|01   |07  |          47679|     3|
2014-01-08|2014|01   |08  |          19760|     3|
2014-01-09|2014|01   |09  |          22944|     2|
2014-01-10|2014|01   |10  |          27923|     2|
2014-02-01|2014|02   |01  |          68225|     2|
2014-02-02|2014|02   |02  |          20496|     2|
2014-02-03|2014|02   |03  |          70477|     3|
2014-02-04|2014|02   |04  |          36060|     3|








# daily_purcahse 테이블을 이용해 당월 누계 매출을 집계하기.

* 결과는 3번과 같지만, 가독성과 재사용성을 위해 WITH 구문으로 재작성

with
daily_purchase as(
	select 
		dt
		,substring(dt,1,4) as year
		,substring(dt,6,2) as month
		,substring(dt,9,2) as date
		,sum(purchase_amount) as purchase_amount
		,count(order_id) as orders
	from purchase_log
	group by dt
)
select 
	dt
	,concat(year,'-',month) as year_month
	,purchase_amount 
	,sum(purchase_amount) over (partition by year,month order by dt rows unbounded preceding) as agg_amount
from daily_purchase 
order by dt;

               ●  결과  ● 
dt        |year_month|purchase_amount|agg_amount|
----------|----------|---------------|----------|
2014-01-01|2014-01   |          24516|     24516|
2014-01-02|2014-01   |          36049|     60565|
2014-01-03|2014-01   |          53029|    113594|
2014-01-04|2014-01   |          29299|    142893|
2014-01-05|2014-01   |          48256|    191149|
2014-01-06|2014-01   |          29440|    220589|
2014-01-07|2014-01   |          47679|    268268|
2014-01-08|2014-01   |          19760|    288028|
2014-01-09|2014-01   |          22944|    310972|
2014-01-10|2014-01   |          27923|    338895|
2014-02-01|2014-02   |          68225|     68225|
2014-02-02|2014-02   |          20496|     88721|
2014-02-03|2014-02   |          70477|    159198|
2014-02-04|2014-02   |          36060|    195258|



==============================================================================================================================



4. 월별 매출의 작대비 구하기


# 데이터 준비

DROP TABLE IF EXISTS purchase_log;
CREATE TABLE purchase_log(
    dt              varchar(255)
  , order_id        integer
  , user_id         varchar(255)
  , purchase_amount integer
);

INSERT INTO purchase_log
VALUES
    ('2014-01-01',    1, 'rhwpvvitou', 13900)
  , ('2014-02-08',   95, 'chtanrqtzj', 28469)
  , ('2014-03-09',  168, 'bcqgtwxdgq', 18899)
  , ('2014-04-11',  250, 'kdjyplrxtk', 12394)
  , ('2014-05-11',  325, 'pgnjnnapsc',  2282)
  , ('2014-06-12',  400, 'iztgctnnlh', 10180)
  , ('2014-07-11',  475, 'eucjmxvjkj',  4027)
  , ('2014-08-10',  550, 'fqwvlvndef',  6243)
  , ('2014-09-10',  625, 'mhwhxfxrxq',  3832)
  , ('2014-10-11',  700, 'wyrgiyvaia',  6716)
  , ('2014-11-10',  775, 'cwpdvmhhwh', 16444)
  , ('2014-12-10',  850, 'eqeaqvixkf', 29199)
  , ('2015-01-09',  925, 'efmclayfnr', 22111)
  , ('2015-02-10', 1000, 'qnebafrkco', 11965)
  , ('2015-03-12', 1075, 'gsvqniykgx', 20215)
  , ('2015-04-12', 1150, 'ayzvjvnocm', 11792)
  , ('2015-05-13', 1225, 'knhevkibbp', 18087)
  , ('2015-06-10', 1291, 'wxhxmzqxuw', 18859)
  , ('2015-07-10', 1366, 'krrcpumtzb', 14919)
  , ('2015-08-08', 1441, 'lpglkecvsl', 12906)
  , ('2015-09-07', 1516, 'mgtlsfgfbj',  5696)
  , ('2015-10-07', 1591, 'trgjscaajt', 13398)
  , ('2015-11-06', 1666, 'ccfbjyeqrb',  6213)
  , ('2015-12-05', 1741, 'onooskbtzp', 26024)
;



with
daily_purchase as(
	select 
		dt
		,substring(dt,1,4) as year
		,substring(dt,6,2) as month
		,substring(dt,9,2) as date
		,sum(purchase_amount) as purchase_amount
		,count(order_id) as orders
	from purchase_log
	group by dt
)
select 
	month
	,sum(case year when '2014' then purchase_amount end) as amount_2014
	,sum(case year when '2015' then purchase_amount end) as amount_2015
	,100.0 
	 * sum(case year when '2015' then purchase_amount end)
	 / sum(case year when '2014' then purchase_amount end)
	 as rate
from daily_purchase 
group by month
order by month 
;


               ●  결과  ● 
month|amount_2014|amount_2015|rate                |
-----|-----------|-----------|--------------------|
01   |      13900|      22111|159.0719424460431655|
02   |      28469|      11965| 42.0281709930099406|
03   |      18899|      20215|106.9633313931954072|
04   |      12394|      11792| 95.1428110375988381|
05   |       2282|      18087|792.5942156003505697|
06   |      10180|      18859|185.2554027504911591|
07   |       4027|      14919|370.4742984852247331|
08   |       6243|      12906|206.7275348390197021|
09   |       3832|       5696|148.6430062630480167|
10   |       6716|      13398|199.4937462775461584|
11   |      16444|       6213| 37.7827779129165653|
12   |      29199|      26024| 89.1263399431487380|




==============================================================================================================================

5. Z차트로 업적의 추이 확인하기

Z차트: 월단위매출, 매출누계, 이동합계 이 세가지 데이터를 차트로 표시한 것



with
-- 날짜별 매출
daily_purchase as(
	select 
		dt
		,substring(dt,1,4) as year
		,substring(dt,6,2) as month
		,substring(dt,9,2) as date
		,sum(purchase_amount) as purchase_amount
		,count(order_id) as orders
	from purchase_log
	group by dt
)
,monthly_amount as(
 -- 월별 매출 
 	select 
 		year 
 		,month 
 		,sum(purchase_amount) as amount
 	from daily_purchase 
 	group by year, month
)
,calc_index as(
	select 
		year 
		,month
		,amount 
		-- 2015년의 누계 매출 집계하기
		,sum(case when year ='2015' then amount end) over (order by year,month rows unbounded preceding) as agg_amount
		-- 당울부터 11개월 이전까지의 매출 합계 (이동년계) 집계하기
		,sum(amount) over (order by year,month rows between 11 preceding and current row) as year_avg_amount
	from monthly_amount
	order by year,month
)
--마지막으로 2015년의 데이터만 압축하기
select
	concat(year,'-',month) as year_month
	,amount 
	,agg_amount 
	,year_avg_amount 
from calc_index
where year ='2015'
order by year_month;


               ●  결과  ● 

year_month|amount|agg_amount|year_avg_amount|
----------|------|----------|---------------|
2015-01   | 22111|     22111|         160796|
2015-02   | 11965|     34076|         144292|
2015-03   | 20215|     54291|         145608|
2015-04   | 11792|     66083|         145006|
2015-05   | 18087|     84170|         160811|
2015-06   | 18859|    103029|         169490|
2015-07   | 14919|    117948|         180382|
2015-08   | 12906|    130854|         187045|
2015-09   |  5696|    136550|         188909|
2015-10   | 13398|    149948|         195591|
2015-11   |  6213|    156161|         185360|
2015-12   | 26024|    182185|         182185|






# 최종 집계하기

with
-- 날짜별 매출
daily_purchase as(
	select 
		dt
		,substring(dt,1,4) as year
		,substring(dt,6,2) as month
		,substring(dt,9,2) as date
		,sum(purchase_amount) as purchase_amount
		,count(order_id) as orders
	from purchase_log
	group by dt
)
,monthly_purchase as(
 	select 
 		year 
 		,month 
 		,sum(orders) as orders 
 		,avg(purchase_amount) as avg_amount
 		,sum(purchase_amount) as monthly
 	from daily_purchase 
 	group by year, month
)
select 
	concat(year,'-',month) as year_month
	,orders 
	,avg_amount
	,monthly 
	-- 연간 월별 누계 구하기
	,sum(monthly) over (partition by year order by month rows unbounded preceding) as agg_amount
	-- 12개월 전의 매출 구하기
	,lag(monthly,12) over (order by year,month) as last_year
	-- 12개월 전 매출 대비 비율
	,100.0
		* monthly
		/ lag(monthly,12) over (order by year,month)
	as rate
from monthly_purchase
order by year_month;


               ●  결과  ● 
year_month|orders|avg_amount            |agg_amount|last_year|rate                |
----------|------|----------------------|----------|---------|--------------------|
2015-01   |     1|    22111.000000000000|     22111|    13900|159.0719424460431655|
2015-02   |     1|11965.0000000000000000|     34076|    28469| 42.0281709930099406|
2015-03   |     1|    20215.000000000000|     54291|    18899|106.9633313931954072|
2015-04   |     1|11792.0000000000000000|     66083|    12394| 95.1428110375988381|
2015-05   |     1|18087.0000000000000000|     84170|     2282|792.5942156003505697|
2015-06   |     1|18859.0000000000000000|    103029|    10180|185.2554027504911591|
2015-07   |     1|14919.0000000000000000|    117948|     4027|370.4742984852247331|
2015-08   |     1|12906.0000000000000000|    130854|     6243|206.7275348390197021|
2015-09   |     1| 5696.0000000000000000|    136550|     3832|148.6430062630480167|
2015-10   |     1|13398.0000000000000000|    149948|     6716|199.4937462775461584|
2015-11   |     1| 6213.0000000000000000|    156161|    16444| 37.7827779129165653|
2015-12   |     1|    26024.000000000000|    182185|    29199| 89.1263399431487380|

		   
			   

